<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Code → Output (single HTML)</title>
  <style>
    :root{--gap:14px;--bg:#0f1724;--card:#0b1220;--accent:#06b6d4;--muted:#9aa8b2}
    *{box-sizing:border-box}
    body{margin:18px;font-family:Inter,ui-sans-serif,system-ui,-apple-system,"Segoe UI",Roboto,Arial; background:linear-gradient(180deg,#08101a 0%, #07101a 100%); color:#e6eef6}
    header{display:flex;align-items:center;justify-content:center;margin-bottom:16px}
    h1{font-size:34px;margin:0}
    .layout{display:flex;gap:var(--gap);align-items:flex-start;justify-content:center}
    .output-wrap{width:500px;height:500px;background:var(--card);border-radius:12px;padding:12px;box-shadow:0 6px 20px rgba(2,6,23,0.6);display:flex;flex-direction:column}
    .output-title{font-size:13px;color:var(--muted);margin-bottom:8px}
    pre#output{flex:1;background:#071425;border-radius:8px;padding:12px;overflow:auto;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,monospace;font-size:14px;color:#d7f4ff}
    .editor-section{display:flex;flex-direction:row;gap:10px}
    .editor-wrap{width:600px;height:600px;background:var(--card);border-radius:12px;padding:12px;box-shadow:0 6px 20px rgba(2,6,23,0.6);display:flex;flex-direction:column}
    .commands-list{width:200px;height:600px;background:var(--card);border-radius:12px;padding:10px;overflow:auto;box-shadow:0 6px 20px rgba(2,6,23,0.4)}
    .commands-list h3{font-size:16px;margin-top:0;color:var(--accent)}
    .commands-list ul{list-style:none;padding:0;margin:0}
    .commands-list li{margin:6px 0;font-size:13px;color:var(--muted)}
    .controls{display:flex;gap:8px;align-items:center;margin-bottom:8px}
    select,button{padding:8px 10px;border-radius:8px;border:1px solid rgba(255,255,255,0.05);background:transparent;color:inherit}
    textarea#code{flex:1;width:100%;height:100%;resize:none;border-radius:8px;padding:12px;background:#02121b;border:1px solid rgba(255,255,255,0.03);color:#e6eef6;font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,monospace;font-size:14px}
    textarea.error{border:1px solid red;}
    .hint{font-size:12px;color:var(--muted)}
    .center-hi{display:flex;flex-direction:column;align-items:center;justify-content:center;margin-top:80px}
    .hi-box{font-size:48px;font-weight:700;color:var(--accent);text-shadow:0 6px 18px rgba(6,182,212,0.12);padding:18px}
    footer{margin-top:18px;text-align:center;color:var(--muted);font-size:13px}
    img.output-img{max-width:100%;border-radius:10px;margin-top:8px}
    @media(max-width:1360px){.layout{flex-direction:column;align-items:center}.output-wrap,.editor-wrap{width:90vw;height:auto}.editor-wrap{height:420px}.output-wrap{height:240px}}
  </style>
</head>
<body>
  <header>
    <h1>Code → Output (single HTML)</h1>
  </header>

  <div class="center-hi">
    <div class="hi-box">hi</div>
  </div>

  <div class="layout">
    <div class="output-wrap">
      <div class="output-title">Output (эмуляция) — 500×500</div>
      <pre id="output">(Нажмите Run — эмулятор попытается показать вывод print/printf/cout/console.log)</pre>
    </div>

    <div class="editor-section">
      <div class="editor-wrap">
        <div class="controls">
          <label class="hint">Язык:</label>
          <select id="lang">
            <option value="python">Python</option>
            <option value="javascript">JavaScript</option>
            <option value="c">C</option>
            <option value="cpp">C++</option>
          </select>
          <button id="runBtn">Run</button>
          <button id="clearBtn">Clear output</button>
          <div style="flex:1"></div>
          <span class="hint">Editor — 600×600</span>
        </div>
        <textarea id="code" placeholder="Например:
Python: print(&quot;hi&quot;)
JS: console.log(&quot;hi&quot;)
C: printf(&quot;hi\n&quot;);
C++: std::cout << &quot;hi&quot; << std::endl;" spellcheck="false"></textarea>
        <div style="height:6px"></div>
        <div class="hint">Примечание: Это эмулятор. Для вывода изображения используйте show(&quot;https://...&quot;).</div>
      </div>

      <div class="commands-list" id="commandsList">
        <h3>Python команды</h3>
        <ul id="pythonCmds">
          <li>print(text)</li>
          <li>input(prompt)</li>
          <li>len(obj)</li>
          <li>if, elif, else</li>
          <li>for, while</li>
        </ul>
        <h3>JavaScript команды</h3>
        <ul id="jsCmds">
          <li>console.log(text)</li>
          <li>prompt(message)</li>
          <li>if, else if, else</li>
          <li>for, while</li>
          <li>show(url) — показать изображение</li>
        </ul>
      </div>
    </div>
  </div>

  <footer>Скопируйте этот файл и откройте в браузере. Работает офлайн.</footer>

  <script>
    const out = document.getElementById('output');
    const code = document.getElementById('code');
    const run = document.getElementById('runBtn');
    const clear = document.getElementById('clearBtn');
    const lang = document.getElementById('lang');

    function emulate(text, language){
      const results = [];
      let img = null;
      if(language === 'python'){
        const regex = /print\s*\(\s*(['"])([\s\S]*?)\1\s*\)/g;
        let m; while((m = regex.exec(text))!==null){results.push(m[2]);}
        const showImg = /show\s*\(\s*(['"])(https?:[\s\S]*?)\1\s*\)/;
        m = showImg.exec(text); if(m) img = m[2];
      } else if(language === 'javascript'){
        const regex = /console\.log\s*\(\s*(['"])([\s\S]*?)\1\s*\)/g;
        let m; while((m = regex.exec(text))!==null){results.push(m[2]);}
        const showImg = /show\s*\(\s*(['"])(https?:[\s\S]*?)\1\s*\)/;
        m = showImg.exec(text); if(m) img = m[2];
      } else if(language === 'c' || language === 'cpp'){
        let m; const printf = /printf\s*\(\s*"([\s\S]*?)"\s*\)\s*;/g;
        while((m = printf.exec(text))!==null){results.push(m[1].replace(/\\n/g,'\n'));}
        const puts = /puts\s*\(\s*"([\s\S]*?)"\s*\)\s*;/g;
        while((m = puts.exec(text))!==null){results.push(m[1]);}
        const cout = /std::cout\s*<<\s*"([\s\S]*?)"/g;
        while((m = cout.exec(text))!==null){results.push(m[1]);}
      }
      let resultText = results.length ? results.join('\n') : '(Нет вывода)';
      if(img){
        resultText += '\n[Показ изображения]\n';
      }
      out.textContent = resultText;
      if(img){
        const image = document.createElement('img');
        image.src = img;
        image.className = 'output-img';
        out.appendChild(image);
      }
    }

    function checkErrors(text){
      if((text.match(/"/g)||[]).length %2 !==0 || (text.match(/\(/g)||[]).length !== (text.match(/\)/g)||[]).length){
        code.classList.add('error');
      } else {
        code.classList.remove('error');
      }
    }

    run.addEventListener('click', ()=>{
      checkErrors(code.value);
      const codeText = code.value || '';
      const r = emulate(codeText, lang.value);
    });

    clear.addEventListener('click', ()=>{ out.textContent = ''; });

    const samples = {
      python: 'print("hi")',
      javascript: 'console.log("hi")',
      c: '#include <stdio.h>\nint main(){\n  printf("hi\\n");\n  return 0;\n}',
      cpp: '#include <iostream>\nint main(){\n  std::cout << "hi" << std::endl;\n  return 0;\n}'
    };
    lang.addEventListener('change', ()=>{ code.value = samples[lang.value]; });
    code.addEventListener('input', ()=> checkErrors(code.value));
    code.value = samples.python;
  </script>
</body>
</html>
